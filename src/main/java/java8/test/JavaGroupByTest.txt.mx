/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.examples;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.regex.Pattern;

import scala.Tuple2;

import com.google.common.collect.Iterables;

import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.sql.SparkSession;

/**
 * Computes the PageRank of URLs from an input file. Input file should
 * be in format of:
 * URL         neighbor URL
 * URL         neighbor URL
 * URL         neighbor URL
 * ...
 * where URL and their neighbors are separated by space(s).
 *
 * This is an example implementation for learning how to use Spark. For more conventional use,
 * please refer to org.apache.spark.graphx.lib.PageRank
 *
 * Example Usage:
 * <pre>
 * bin/run-example JavaPageRank data/mllib/pagerank_data.txt 10
 * </pre>
 */
public final class JavaGroupByTest {
    private static final Pattern SPACES = Pattern.compile("\\s+");

    static void showWarning() {
        String warning = "WARN: This is a naive implementation of PageRank " +
                "and is given as an example! \n" +
                "Please use the PageRank implementation found in " +
                "org.apache.spark.graphx.lib.PageRank for more conventional use.";
        System.err.println(warning);
    }

//    private static class Sum implements Function2<Double, Double, Double> {
//        @Override
//        public Double call(Double a, Double b) {
//            return a + b;
//        }
//    }

    public static void main(String[] args) throws Exception {

        showWarning();
        SparkSession spark = SparkSession
                .builder()
                .appName("JavaGroupByTest")
                .getOrCreate();
        int numMappers = (args.length>0)? Integer.parseInt(args[0]) : 2;
        int numKVPairs = (args.length>1)? Integer.parseInt(args[1]) : 1000;
        int valSize = (args.length>2)? Integer.parseInt(args[2]) : 1000;
        int numReducers = (args.length>3)? Integer.parseInt(args[3]) : numMappers;

        JavaPairRDD<Integer,Iterable<Byte>> pairs1 = spark.sparkContext().parallelize().flatMap(s -> {
            Random ranGen = new Random();
            Tuple2<Integer,Byte[]>[] arr1 = new Tuple2[numKVPairs];
            for(int i=0; i<numKVPairs; i++){
                byte[] byteArr = new byte[valSize];
                ranGen.nextBytes(byteArr);
                arr1[i] = new Tuple2<Integer,Iterable<Byte>>(ranGen.nextInt(Integer.MAX_VALUE),byteArr);
            }
            return arr1;
        });//.cache();

        pairs1.cache();
        pairs1.count();
        System.out.println(pairs1.groupByKey(numReducers).count());
                // Loads in input file. It should be in format of:
        //     URL         neighbor URL
        //     URL         neighbor URL
        //     URL         neighbor URL
        //     ...
//        JavaRDD<String> lines = spark.read().textFile(args[0]).javaRDD();
//
//        // Loads all URLs from input file and initialize their neighbors.
//        JavaPairRDD<String, Iterable<String>> links = lines.mapToPair(s -> {
//            String[] parts = SPACES.split(s);
//            return new Tuple2<>(parts[0], parts[1]);
//        }).distinct().groupByKey().cache();
//
//        // Loads all URLs with other URL(s) link to from input file and initialize ranks of them to one.
//        JavaPairRDD<String, Double> ranks = links.mapValues(rs -> 1.0);
//
//        // Calculates and updates URL ranks continuously using PageRank algorithm.
//        for (int current = 0; current < Integer.parseInt(args[1]); current++) {
//            // Calculates URL contributions to the rank of other URLs.
//            JavaPairRDD<String, Double> contribs = links.join(ranks).values()
//                    .flatMapToPair(s -> {
//                        int urlCount = Iterables.size(s._1());
//                        List<Tuple2<String, Double>> results = new ArrayList<>();
//                        for (String n : s._1) {
//                            results.add(new Tuple2<>(n, s._2() / urlCount));
//                        }
//                        return results.iterator();
//                    });
//
//            // Re-calculates URL ranks based on neighbor contributions.
//            ranks = contribs.reduceByKey(new Sum()).mapValues(sum -> 0.15 + sum * 0.85);
//        }
//
//        // Collects all URL ranks and dump them to console.
//        List<Tuple2<String, Double>> output = ranks.collect();
//        for (Tuple2<?,?> tuple : output) {
//            System.out.println(tuple._1() + " has rank: " + tuple._2() + ".");
//        }

        spark.stop();
    }
}
